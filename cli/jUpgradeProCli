#!/usr/bin/php
<?php
/**
 * @version		    $Id: 
 * @package		    jUpgrade
 * @subpackage	  jUpgradeCli
 * @copyright			CopyRight 2011 Matware All rights reserved.
 * @author				Matias Aguirre
 * @email   			maguirre@matware.com.ar
 * @link					http://www.matware.com.ar/
 * @license				GNU/GPL http://www.gnu.org/licenses/gpl-2.0-standalone.html
 */
// We are a valid Joomla entry point.
define('_JEXEC', 1);

// Bootstrap the application.
require './bootstrap.php';

class jUpgradeCli extends JApplicationCli
{
	/**
	* A database object for the application to use.
	*
	* @var JDatabase
	* @since 11.3
	*/
	protected $jupgrade = null;

	/**
	* Class constructor.
	*
	* @return void
	*
	* @since 2.5.0
	*/
	public function __construct()
	{
		// Call the parent __construct method so it bootstraps the application class.
		parent::__construct();
	
		// Create the jUpgrade object
		$this->jupgrade = new jUpgrade;

		// Creating dabatase instance for this installation
		$this->_db = JFactory::getDBO();

		// Add the logger.
		JLog::addLogger(
			// Pass an array of configuration options
			array(
				// Set the name of the log file
				'text_file' => JPATH_SITE.'/logs/jupgradepro.log.php'
			)
		);

	}

	/**
	 * Help
	 *
	 * @return	none
	 * @since	2.5.0
	 */
  public function help()
	{
		// Print help
		$this->out();
		$this->out(' jUpgradeCli v3.0.0');
		$this->out(' Usage: jUpgradeCli --from your_database.sql --to your_migrate_database.sql [ --only=users|categories|content|modules|menus ] ');
		$this->out();
		$this->out(' Author: Matias Aguirre (maguirre@matware.com.ar)');
		$this->out(' License: GNU/GPL http://www.gnu.org/licenses/gpl-2.0-standalone.html');
		$this->out();
	}

	/**
	 * execute
	 *
	 * @return	none
	 * @since	2.5.0
	 */
  public function execute()
  {
		// Cleanup 
		$this->cleanup();
		// Start migration
		$this->migrate();
	} // end method

	/**
	 * migrate
	 *
	 * @return	none
	 * @since	2.5.0
	 */
	public function migrate()
	{
		$finished = false;

		$model = new jUpgradeProModel;

		while (!$finished)
		{
			// Getting the current step
			$step = $model->getStep(false, false);

			if ($step == false) {
				break;
			}

			$this->out("\n===========================================================");
			$this->out("[{$step->id}] Migrating {$step->name} (Start:{$step->start} - Stop: {$step->stop} - Total: {$step->total})");

			$start = $step->start;
			$stop = $step->stop;
			$total = $step->total;

			for($i=$start;$i<=$stop;$i++) {
				$result = $model->getMigrate($step->name, false);
				echo ".";
			}
		}

	} // end method

	/**
	 * Cleanup
	 *
	 * @return	none
	 * @since	2.5.0
	 */
	function cleanup()
	{
		// If REST is enable, cleanup the source jupgrade_steps table
		if ($this->jupgrade->params->get('method') == 'rest') {	
			// Cleanup the rest data
			$this->jupgrade->requestRest($task = 'cleanup', $table = false);
		}

		// Set all cid, status and cache to 0 
		$query = "UPDATE jupgrade_steps SET cid = 0, status = 0, cache = 0";
		$this->jupgrade->_db->setQuery($query);
		$this->jupgrade->_db->query();
	
		// Get the prefix
		$prefix = $this->jupgrade->_db->getPrefix();
		$prefix_old = $this->jupgrade->_db_old->getPrefix();

		// Truncate the selected tables
		$tables = array();
		$tables[] = 'jupgrade_categories';
		$tables[] = 'jupgrade_menus';
		$tables[] = 'jupgrade_modules';
		$tables[] = "{$this->jupgrade->_db->getPrefix()}menu_types";
		$tables[] = "{$this->jupgrade->_db->getPrefix()}content";

		for ($i=0;$i<count($tables);$i++) {
			if ($this->jupgrade->canDrop) {
				$query = "TRUNCATE TABLE `{$tables[$i]}`";
			}else{
				$query = "DELETE FROM `{$tables[$i]}`";
			}
			$this->jupgrade->_db->setQuery($query);
			$this->jupgrade->_db->query();
		}

		// Check for query error.
		$error = $this->jupgrade->_db->getErrorMsg();
		if ($error) {
			throw new Exception($error);
		}

		// Delete main menu
		$query = "DELETE FROM {$this->jupgrade->_db->getPrefix()}menu WHERE id > 1";
		$this->jupgrade->_db->setQuery($query);
		$this->jupgrade->_db->query();

		// Check for query error.
		$error = $this->jupgrade->_db->getErrorMsg();
		if ($error) {
			throw new Exception($error);
		}

		// Insert needed value
		$query = "INSERT INTO `jupgrade_menus` ( `old`, `new`) VALUES ( 0, 0)";
		$this->jupgrade->_db->setQuery($query);
		$this->jupgrade->_db->query();

		// Check for query error.
		$error = $this->jupgrade->_db->getErrorMsg();

		if ($error) {
			throw new Exception($error);
		}

		// Insert uncategorized id
		$query = "INSERT INTO `jupgrade_categories` (`old`, `new`) VALUES (0, 2)";
		$this->jupgrade->_db->setQuery($query);
		$this->jupgrade->_db->query();

		// Check for query error.
		$error = $this->jupgrade->_db->getErrorMsg();

		if ($error) {
			throw new Exception($error);
		}

		// Delete uncategorized categories
		$query = "DELETE FROM {$prefix}categories WHERE id > 1";
		$this->jupgrade->_db->setQuery($query);
		$this->jupgrade->_db->query();

		// Check for query error.
		$error = $this->jupgrade->_db->getErrorMsg();

		if ($error) {
			throw new Exception($error);
		}

		// Change the id of the admin user
		$query = "UPDATE {$prefix}users SET id = 10 WHERE username = 'admin'";
		$this->jupgrade->_db->setQuery($query);
		$this->jupgrade->_db->query();

		// Check for query error.
		$error = $this->jupgrade->_db->getErrorMsg();

		if ($error) {
			throw new Exception($error);
		}

		$query = "UPDATE {$prefix}user_usergroup_map SET user_id = 10 WHERE group_id = 8";
		$this->jupgrade->_db->setQuery($query);
		$this->jupgrade->_db->query();

		// Check for query error.
		$error = $this->jupgrade->_db->getErrorMsg();

		if ($error) {
			throw new Exception($error);
		}

	} // end method

	/**
	 * processStep
	 *
	 * @return	none
	 * @since	2.5.0
	 *
	public function processExtensionStep ($step)
	{
		// Get jUpgradeExtensions instance
		$extension = jUpgradeExtensions::getInstance($step);
		$success = $extension->upgradeExtension();

		if ($extension->isReady())
		{
			// updating the status flag
			$query = "UPDATE jupgrade_steps SET status = 1"
			." WHERE name = '{$step->name}'";
			$this->jupgrade->_db->setQuery($query);
			$this->jupgrade->_db->query();

			// Check for query error.
			$error = $this->jupgrade->_db->getErrorMsg();
		}
	}*/

} // end class

// Wrap the execution in a try statement to catch any exceptions thrown anywhere in the script.
try
{
	// Instantiate the application object, passing the class name to JCli::getInstance
	// and use chaining to execute the application.
	JApplicationCli::getInstance('jUpgradeCli')->execute();
}
catch (Exception $e)
{
	// An exception has been caught, just echo the message.
	fwrite(STDOUT, $e->getMessage() . "\n");
	exit($e->getCode());
}
